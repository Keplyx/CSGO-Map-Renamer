/*
 * Copyright (C) 2016 keplyx
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * contact: keplyx@gmail.com
 */
package maprename.gui;

import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import maprename.*;

/**
 *
 * @author keplyx
 */
public class MapRenameUI extends javax.swing.JFrame {

    /**
     * Creates new form MapRenameUI
     */
    public MapRenameUI() {
        initComponents();
        setLocationRelativeTo(null);
        setDefault();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        csgoDirFileChooser = new javax.swing.JFileChooser();
        mapFileChooser = new javax.swing.JFileChooser();
        csgoDirField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        mapNameField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        newMapNameField = new javax.swing.JTextField();
        renameButton = new javax.swing.JButton();
        overwriteCheck = new javax.swing.JCheckBox();
        selectFolderButton = new javax.swing.JButton();
        removeListButton = new javax.swing.JButton();
        findMapButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        filesFoundList = new javax.swing.JList<>();
        selectMapButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        consoleTextArea = new javax.swing.JTextArea();
        setDefaultButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        JMenu1 = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        JMenu2 = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        supportedFilesMenuItem = new javax.swing.JMenuItem();
        creditsMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        reportMenuItem = new javax.swing.JMenuItem();

        csgoDirFileChooser.setFileSelectionMode(csgoDirFileChooser.DIRECTORIES_ONLY);
        csgoDirFileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        mapFileChooser.setCurrentDirectory(null);
        mapFileChooser.setFileFilter(new FileNameExtensionFilter("Valve map files (.bsp)", "bsp"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Source Map Renamer");
        setSize(new java.awt.Dimension(0, 0));

        csgoDirField.setToolTipText("Path to the game folder");
        csgoDirField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csgoDirFieldActionPerformed(evt);
            }
        });
        csgoDirField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                csgoDirFieldKeyTyped(evt);
            }
        });

        jLabel1.setText("Game Directory:");

        jLabel2.setText("Map Name:");

        mapNameField.setToolTipText("Do not include .bsp!");
        mapNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapNameFieldActionPerformed(evt);
            }
        });
        mapNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mapNameFieldKeyTyped(evt);
            }
        });

        jLabel4.setText("New Map Name:");

        newMapNameField.setToolTipText("Do not include .bsp!");
        newMapNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMapNameFieldActionPerformed(evt);
            }
        });

        renameButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        renameButton.setText("Rename!");
        renameButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        renameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameButtonActionPerformed(evt);
            }
        });

        overwriteCheck.setText("Overwrite original file");

        selectFolderButton.setText("...");
        selectFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFolderButtonActionPerformed(evt);
            }
        });

        removeListButton.setText("Do not rename selected");
        removeListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeListButtonActionPerformed(evt);
            }
        });

        findMapButton.setText("Find");
        findMapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findMapButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Files Found", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        filesFoundList.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        filesFoundList.setModel(new DefaultListModel<String>());
        filesFoundList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        filesFoundList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        filesFoundList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                filesFoundListKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(filesFoundList);

        selectMapButton.setText("...");
        selectMapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectMapButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportBorder(javax.swing.BorderFactory.createTitledBorder(null, "Console", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jScrollPane2.setOpaque(false);

        consoleTextArea.setEditable(false);
        consoleTextArea.setColumns(20);
        consoleTextArea.setRows(5);
        consoleTextArea.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        consoleTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        consoleTextArea.setOpaque(false);
        jScrollPane2.setViewportView(consoleTextArea);

        setDefaultButton.setText("Set as default");
        setDefaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDefaultButtonActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Rename your map before packing\ncustom content / building cubemaps\nor it won't work properly.\n\nRenaming a copy can take a while if\nyour map is big, just wait.\n\nNot finding a file for your map?\nContact me at keplyx@gmail.com");
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tips", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jTextArea1.setOpaque(false);
        jScrollPane3.setViewportView(jTextArea1);

        JMenu1.setText("File");

        exitMenuItem.setIcon(new javax.swing.ImageIcon("/home/keplyx/Téléchargements/cancel-146131_640.png")); // NOI18N
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        JMenu1.add(exitMenuItem);

        jMenuBar1.add(JMenu1);

        JMenu2.setText("Help");

        helpMenuItem.setIcon(new javax.swing.ImageIcon("/home/keplyx/Téléchargements/help.png")); // NOI18N
        helpMenuItem.setText("Help Contents");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        JMenu2.add(helpMenuItem);

        supportedFilesMenuItem.setIcon(new javax.swing.ImageIcon("/home/keplyx/Téléchargements/supported.png")); // NOI18N
        supportedFilesMenuItem.setText("Supported Files");
        supportedFilesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supportedFilesMenuItemActionPerformed(evt);
            }
        });
        JMenu2.add(supportedFilesMenuItem);

        creditsMenuItem.setIcon(new javax.swing.ImageIcon("/home/keplyx/Téléchargements/about.png")); // NOI18N
        creditsMenuItem.setText("About");
        creditsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditsMenuItemActionPerformed(evt);
            }
        });
        JMenu2.add(creditsMenuItem);
        JMenu2.add(jSeparator1);

        reportMenuItem.setIcon(new javax.swing.ImageIcon("/home/keplyx/Téléchargements/report.png")); // NOI18N
        reportMenuItem.setText("Report Issue");
        reportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportMenuItemActionPerformed(evt);
            }
        });
        JMenu2.add(reportMenuItem);

        jMenuBar1.add(JMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newMapNameField))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(mapNameField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectMapButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(findMapButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(csgoDirField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setDefaultButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(renameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(overwriteCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(removeListButton)
                                .addGap(47, 47, 47))
                            .addComponent(jScrollPane3))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(csgoDirField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setDefaultButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(mapNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectMapButton, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findMapButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(removeListButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(overwriteCheck)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(newMapNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(renameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mapNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapNameFieldActionPerformed

    }//GEN-LAST:event_mapNameFieldActionPerformed

    private void renameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameButtonActionPerformed
        prepareRename();
    }//GEN-LAST:event_renameButtonActionPerformed

    private void newMapNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMapNameFieldActionPerformed
        prepareRename();
    }//GEN-LAST:event_newMapNameFieldActionPerformed

    private void selectFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFolderButtonActionPerformed
        csgoDirFileChooser.setCurrentDirectory(new File(csgoDirField.getText()));
        csgoDirFileChooser.showOpenDialog(this);
        if (csgoDirFileChooser.getSelectedFile() != null) {
            csgoDirField.setText(csgoDirFileChooser.getSelectedFile().getPath());
            writeToConsole("Game directory set to: " + csgoDirFileChooser.getSelectedFile().getPath() + "\n");
            clearList();
        }
    }//GEN-LAST:event_selectFolderButtonActionPerformed

    private void removeListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeListButtonActionPerformed
        removeFromList();
    }//GEN-LAST:event_removeListButtonActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        this.dispose();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void creditsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creditsMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, "Made by Keplyx\n"
                + "Contact: keplyx@gmail.com\n"
                + "\nLicenced under GNU 3.0 (https://www.gnu.org/licenses/gpl.html)\n"
                + "(See LICENCE.txt provided with the software)\n"
                + "Made in Java (JDK 8)", "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_creditsMenuItemActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, "First, select your game folder. eg: [steam directory]/Counter-Strike Global Offensive/csgo.\n"
                + "Then enter your old map name without .bsp. eg: de_dust2.\n"
                + "Click on Find, and a list of all found files will be displayed.\n"
                + "If you don't want to rename some of the files, select them and click on Do not rename selected.\n"
                + "You can choose to overwrite the original file, but this is not recommended (having backups is always good).\n"
                + "Enter your new map name without .bsp. eg: de_dust3.\n"
                + "Finally, click on Rename!", "Help", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_helpMenuItemActionPerformed

    private void findMapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findMapButtonActionPerformed
        listFiles();
    }//GEN-LAST:event_findMapButtonActionPerformed

    private void filesFoundListKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filesFoundListKeyTyped
        if (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE || evt.getKeyChar() == KeyEvent.VK_DELETE) {
            removeFromList();
        }

    }//GEN-LAST:event_filesFoundListKeyTyped

    private void csgoDirFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_csgoDirFieldKeyTyped
        if (filesFoundList.getModel().getSize() > 0) {
            clearList();
        }
    }//GEN-LAST:event_csgoDirFieldKeyTyped

    private void mapNameFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mapNameFieldKeyTyped
        if (filesFoundList.getModel().getSize() > 0) {
            clearList();
        }
    }//GEN-LAST:event_mapNameFieldKeyTyped

    private void selectMapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectMapButtonActionPerformed
        mapFileChooser.setCurrentDirectory(new File(csgoDirField.getText()));
        mapFileChooser.showOpenDialog(this);
        if (mapFileChooser.getSelectedFile() != null) {
            String mapName = mapFileChooser.getSelectedFile().getName();
            mapNameField.setText(mapName.substring(0, mapName.indexOf(".")));
            writeToConsole("Map name set to: " + mapName.substring(0, mapName.indexOf(".")) + "\n");
            clearList();
        }

    }//GEN-LAST:event_selectMapButtonActionPerformed

    private void supportedFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supportedFilesMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, "Files currently supported by the software:\n"
                + "maps/XXX.bsp\n"
                + "maps/XXX.nav\n"
                + "maps/XXX.kv\n"
                + "maps/XXX_camera.txt\n"
                + "maps/XXX_level_sounds.txt\n"
                + "maps/cfg/XXX.cfg\n"
                + "resource/overviews/XXX.txt\n"
                + "resource/overviews/XXX_lower_radar.dds\n"
                + "resource/overviews/XXX_higher_radar.dds\n"
                + "resource/overviews/XXX_radar.dds\n"
                + "resource/overviews/XXX_radar_spectate.dds\n"
                + "scripts/soundscapes_XXX.txt\n"
                + "\nIf you need to rename a file not in the list above,\n"
                + "feel free to request it at: keplyx@gmail.com", "Supported Files", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_supportedFilesMenuItemActionPerformed

    private void reportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, "Report issues at: keplyx@gmail.com\n", "Report Issue", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_reportMenuItemActionPerformed

    private void setDefaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDefaultButtonActionPerformed
        File defaultCS = new File(DEFAULTFILE);
        try {
            PrintWriter pw = new PrintWriter(defaultCS);
            pw.print(csgoDirField.getText());
            pw.close();
            writeToConsole(csgoDirField.getText() + " set to default");
        } catch (FileNotFoundException ex) {
            writeToConsole("Could not find " + DEFAULTFILE);
        }
    }//GEN-LAST:event_setDefaultButtonActionPerformed

    private void csgoDirFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csgoDirFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_csgoDirFieldActionPerformed

    public void writeToConsole(String message) {
        consoleTextArea.append(message);
    }
    
    
    public void addFilesToList(String filePath) {
        DefaultListModel<String> model = (DefaultListModel<String>) filesFoundList.getModel();
        model.addElement(filePath);
    }

    public String getCsgoDir() {
        return csgoDirField.getText();
    }

    private void listFiles() {
        DefaultListModel<String> model = (DefaultListModel<String>) filesFoundList.getModel();
        clearList();

        FilesFinder finder = new FilesFinder();

        if (!finder.findAll(this, mapNameField.getText())) {
            JOptionPane.showMessageDialog(this, "Sub-folders not found\n"
                    + "Make sure your game folder is correct\n"
                    + HELPMESSAGE, "Warning!", JOptionPane.WARNING_MESSAGE);
            writeToConsole("Error: Sub-folders not found\n");
        } else if (model.getSize() == 0) {
            JOptionPane.showMessageDialog(this, "No files found!\n"
                    + "Make sure your map name is correct\n"
                    + HELPMESSAGE, "Warning!", JOptionPane.WARNING_MESSAGE);
            writeToConsole("Error: No files found!\n");
        }

    }

    private void removeFromList() {
        DefaultListModel<String> model = (DefaultListModel<String>) filesFoundList.getModel();
        if (filesFoundList.getSelectedIndex() > 0) {
            writeToConsole("Removed " + model.getElementAt(filesFoundList.getSelectedIndex()) + " from list\n");
            model.remove(filesFoundList.getSelectedIndex());
        }
    }

    private void clearList() {
        DefaultListModel<String> model = (DefaultListModel<String>) filesFoundList.getModel();
        model.removeAllElements();
        writeToConsole("List cleared\n");
    }

    private void prepareRename() {
        writeToConsole("Preparing for rename...\n");

        DefaultListModel<String> model = (DefaultListModel<String>) filesFoundList.getModel();
        String[] paths = new String[model.getSize()];

        for (int i = 0; i < model.getSize(); i++) {
            paths[i] = csgoDirField.getText() + model.elementAt(i);
        }

        if (paths.length != 0) {
            MapRenamer renamer = new MapRenamer(this, newMapNameField.getText(), mapNameField.getText(), paths);

            if (renamer.getFiles() && !renamer.checkExisting()) {
                renameFile(renamer);
            } else if (!renamer.getFiles()) {
                JOptionPane.showMessageDialog(this, "Failed to rename files!\nInvalid names", "Warning!", JOptionPane.WARNING_MESSAGE);
                writeToConsole("Invalid files name\n");
            } else if (renamer.checkExisting()) {
                String files = "";
                for (String s : renamer.getExistingFiles()) {
                    if (s != null) {
                        files += "\n" + s;
                    }
                }
                if (overwriteDialog(files)) {
                    writeToConsole("Overwriting files...\n");
                    renameFile(renamer);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No files found to rename\n"
                    + "Please make sure your map name is correct and you clicked on Find\n"
                    + HELPMESSAGE, "Warning!", JOptionPane.WARNING_MESSAGE);
            writeToConsole("No files found to rename\n");
        }
    }

    private boolean overwriteDialog(String files) {
        writeToConsole("Files already existing...\n");

        int dialogResult = JOptionPane.showConfirmDialog(this, "Files already existing:\n" + files
                + "\n\nDo you want to overwrite them?", "Warning!", JOptionPane.YES_NO_OPTION);

        return dialogResult == 0;
    }

    private void renameFile(MapRenamer renamer) {
        if (renamer.selectRenameType(overwriteCheck.isSelected())) {
            writeToConsole("\n------ SUCCESS ------\n\n");
            int dialogResult = JOptionPane.showConfirmDialog(this, "Map files successfuly renamed!"
                    + "\n\n Do you want to close the app?", "Success!", JOptionPane.YES_NO_OPTION);
            if (dialogResult == 0) {
                this.dispose();
                writeToConsole("Closing app\n");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Failed to rename files!", "Warning!", JOptionPane.WARNING_MESSAGE);
            writeToConsole("\n------ FAILED ------\n\n");
        }
        clearList();
    }

    private void setDefault() {
        File file = new File(DEFAULTFILE);
        if (file.exists()) {
            try {
                BufferedReader br = new BufferedReader(new FileReader(file));
                csgoDirField.setText(br.readLine());
                br.close();
                writeToConsole("Setting default game folder to: " + csgoDirField.getText() + "\n");
            } catch (IOException ex) {
                writeToConsole("Could not open " + DEFAULTFILE + "\n");
            }
        } else {
            writeToConsole("Could not find " + DEFAULTFILE + "\n");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MapRenameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MapRenameUI().setVisible(true);
        });
    }

    private final String HELPMESSAGE = "\nFor more infos, click on 'Help', 'Help Content'";
    private final String DEFAULTFILE = "default";

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu JMenu1;
    private javax.swing.JMenu JMenu2;
    private javax.swing.JTextArea consoleTextArea;
    private javax.swing.JMenuItem creditsMenuItem;
    private javax.swing.JTextField csgoDirField;
    private javax.swing.JFileChooser csgoDirFileChooser;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JList<String> filesFoundList;
    private javax.swing.JButton findMapButton;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JFileChooser mapFileChooser;
    private javax.swing.JTextField mapNameField;
    private javax.swing.JTextField newMapNameField;
    private javax.swing.JCheckBox overwriteCheck;
    private javax.swing.JButton removeListButton;
    private javax.swing.JButton renameButton;
    private javax.swing.JMenuItem reportMenuItem;
    private javax.swing.JButton selectFolderButton;
    private javax.swing.JButton selectMapButton;
    private javax.swing.JButton setDefaultButton;
    private javax.swing.JMenuItem supportedFilesMenuItem;
    // End of variables declaration//GEN-END:variables
}
